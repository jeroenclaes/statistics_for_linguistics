{
    "collab_server" : "",
    "contents" : "---\ntitle: 'Class 3: Exploring qualitative variables'\nauthor: \"Jeroen Claes\"\ndate: \"19/2/2018\"\noutput:\n  revealjs::revealjs_presentation:\n    css: white.css\n    self_contained: no\n    transition: none\n  word_document:\n    toc: no\n---\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, eval=TRUE, message=FALSE, warning=FALSE, error=FALSE, fig.height = 4, dpi = 300)\n\nlibrary(pander)\nlibrary(readr)\nlibrary(dplyr)\ndataSet <- read_csv(\"http://www.jeroenclaes.be/statistics_for_linguistics/datasets/class3_claes_2017.csv\")\n\n\n``` \n\n\n## Contents\n1. Data for this class\n2. Factors\n3. Frequencies: counting values\n4. Proportions\n5. Bar plots\n6. References\n\n## 1. Data for this class\n- Data from Claes(2017):\n    - Corpus investigation into existential agreement variation in Peninsular Spanish\n    - Data drawn from *Twitter* and *Corpus Oral y Sonoro del Español Rural (COSER)*\n    - Random sample of 500 lines from the dataset\n  \n```{r data, eval=FALSE}\nlibrary(readr)\nlibrary(dplyr)\ndataSet <- read_csv(\"http://www.jeroenclaes.be/statistics_for_linguistics/datasets/class3_claes_2017.csv\")\nglimpse(dataSet)\n```\n\n## 2. Factors\n- When a text/character column can only have a few values (e.g., absent, present) in your analysis, it is best to convert it to a factor\n- A factor is a special type of text column:\n    - R knows all of its unique values\n    - Factors are encoded internally as numbers, and many computations depend on that \n    - Factors have an order, giving you control over the appearance of tables and plots\n        - The default order is always alphabetical\n    \n## 2.1 Conversion from character to factor\n- To convert  *character* columns to *factor* you can use `as.factor`\n```{r mutateIf1}\ndataSet$type <- as.factor(dataSet$type) \n```\n\n## 2.2 Conversion from character to factor\n- To convert all *character* values to *factor* we may use the dplyr function `mutate_if`\n```{r mutateIf}\nlibrary(dplyr)\ndataSet <- mutate_if(dataSet, is.character, as.factor)\n```\n\n## 2.3 Levels\n- The values a factor can assume are called `levels` \n- The first level is called the `reference level` \n\n```{r levels}\nlevels(dataSet$type)\n```\n\n## 2.4 Re-ordering a factor\n- To re-order the levels of a factor, you can use `relevel`\n\n```{r relevel}\nlevels(dataSet$type)\ndataSet$type <- relevel(dataSet$type, ref=\"singular\")\nlevels(dataSet$type)\n```\n\n## 2.4 Re-ordering a factor\n- To re-order the levels of a factor based on the values of another column, you can use the function `reorder`\n- Useful for organizing the appearance of plots \n```{r reorder1}\nlevels(dataSet$type)\ndataSet$type <- reorder(dataSet$type,dataSet$noun_length)\nlevels(dataSet$type)\n```\n\n## 2.5 Changing factor values\n- Often you code your data in a particular way, but during the analysis you realize that your coding is not ideal\n- Changing factor values is called `recoding` and it used to be very hard to do\n- The function `recode` in the `dplyr` package changed that.\n    - Format: `\"OldValue\"=\"NewValue\"`\n```{r recode1}\nlevels(dataSet$broad.regions)\ndataSet$broad.regions <- recode(dataSet$broad.regions, 'North'=\"Top\", \"East\"=\"Left\", \"Center\"=\"Middle\", \"South\"=\"Bottom\") \nlevels(dataSet$broad.regions)\n```\n\n## 2.5 Changing factor values\n- You can also use `recode` to merge factor levels   \n```{r recode2}\nlevels(dataSet$broad.regions)\ndataSet$broad.regions <- recode(dataSet$broad.regions, \"Left\"=\"Middle\") \nlevels(dataSet$broad.regions)\n```\n\n## 2.6 Excercises\n- Go to http://www.jeroenclaes.be/statistics_for_linguistics/labs/class3.html and perform the excercises under *4.Factors*\n\n##  3. Frequencies: counting values\n##  3.1 Counting values\n- To describe a categorical variable, there's not much you can do except counting how many times each value occurs\n- This is what the `table` function does\n```{r table}\ntable(dataSet$type)\n```\n\n## 3.2 Counts as data.frames\n- Tables are nice for interactive use, but they are less of a tidy data format to program with than data.frames\n- Tables can be converted to data.frames with `as.data.frame`\n```{r table2}\ntab <- as.data.frame(table(dataSet$type))\ntab\n```\n\n## 3.3 Excercises\n- Go to http://www.jeroenclaes.be/statistics_for_linguistics/labs/class3.html and perform the excercises under *5.Frequencies: counting values*\n\n## 4. Proportions\n## 4.1 Calculating proportions as decimals\n- Proportions are expressed as decimal numbers:\n    - `0.25` equals 25%\n- Proportions can be calculated from tables with `prop.table`\n```{r prop}\nprop.table(table(dataSet$type))\n```\n\n## 4.2 Proportions as percentages \n- To have the result as numbers from 1 to 100, just multiply by 100\n```{r prop2}\nprop.table(table(dataSet$type)) * 100\n```\n\n## 4.3 Rounding proportions \n- To round the proportions to a number of decimals, we can use `round`\n```{r prop21}\ntab <- prop.table(table(dataSet$type))  \nround(tab, 2)\n```\n\n## 4.4 Proportions as data.frames\n- You can convert proportions to data.frames, because they are still tables\n```{r prop3}\ntab <- prop.table(table(dataSet$type)) \ntab <- as.data.frame(tab)\ntab \n# In one line:\n# tab <- as.data.frame(prop.table(table(dataSet$type))) \n\n```\n\n## 4.5 Calculating proportions yourself\n- Of course, you also store your counts in a data.frame and calculate the proportions yourself\n```{r prop4}\ntab <- table(dataSet$type)\ntab <- as.data.frame(tab)\ntab$proportion <- tab$Freq/sum(tab$Freq, na.rm=TRUE)\ntab\n```\n\n## 4.6 Excercises\n- Go to http://www.jeroenclaes.be/statistics_for_linguistics/labs/class3.html and perform the excercises under *6.Proportions*\n\n## 5. Bar plots\n## 5.1 Why plots?\n- Calculating counts and proportions is great for getting to understand your data, but in papers you will want to use charts:\n    - Charts are more intuitive and help people understand the magnitude of the differences between your proportions\n- Charts should speak for themselves: \n    - if you can't figure out what the chart is supposed to show by just looking at the plot, you're doing something wrong!\n\n## 5.2 Plotting in `ggplot` (1/6)\n- Let's take a moment to review the basic syntax of `ggplot`\n- This command sets up the basis of `ggplot`:\n    - It defines the data we are working with (`dataSet`)\n    - It defines the aesthetics (`aes()`) that are inherited by the other plotting functions that follow behind the `+` signs:\n        - Our `x` axis (the horizontal axis) will plot the `type` variable\n        - We don't specify a `y` axis, the counts will be calculated by our plotting function\n```{r ggplot20, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))\n```\n\n## 5.2 Plotting in `ggplot` (2/6)\n- After the basic setup, we can add multiple plot layers by adding plotting functions separated by a `+` sign. Here we will consider `geom_bar()`.\n\n```{r ggplot21, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar()\n```\n\n## 5.2 Plotting in `ggplot` (3/6)\n- Once we have our plotting layer(s), we can change the appearance of our plot with theme functions:\n    - All existing themes are listed on: http://ggplot2.tidyverse.org/reference/ggtheme.html\n    \n\n```{r ggplot211, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal()\n```\n\n## 5.2 Plotting in `ggplot` (3/6)\n\n```{r ggplot211_plot, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal()\n```\n\n\n## 5.2 Plotting in `ggplot` (4/6)\n- To modify aspects of the theme, we can add a call to `theme`\n- Useful theme settings include:\n    - `legend.position`:\n        - `none`: no legend\n        - `bottom`: bottom\n    - `legend.title`:\n        - `element_blank()`: no (sometimes ugly) legend title\n    - `axis.text.x`:\n        - `element_text(angle=90)` will rotate your text 90°\n\n```{r ggplot213, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal() + \n  theme(axis.text.x = element_text(angle=90), legend.title = element_blank())\n```\n\n## 5.2 Plotting in `ggplot` (5/6)\n- Finally, we can add axis and plot titles\n```{r ggplot2121_code, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal() + \n  theme(axis.text.x = element_text(angle=90)) +\n  labs(x=\"Type\", y=\"Frequency\", title=\"haber in Peninsular Spanish\")\n```\n## 5.2 Plotting in `ggplot` (5/6)\n```{r ggplot2121, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal() + \n  theme(axis.text.x = element_text(angle=90)) +\n  labs(x=\"Type\", y=\"Frequency\", title=\"haber in Peninsular Spanish\")\n```\n\n\n## 5.2 Plotting in `ggplot` (6/6)\n- Unfortunately, *italicising* parts of (axis) titles is rather complicated \n```{r ggplot212, eval=TRUE, fig.height=3}\nlibrary(ggplot2)\ntitleWithItalics <- expression(paste(italic(\"Haber \"), \"in Peninsular Spanish\"))\nggplot(dataSet, aes(x=type))  + \n  geom_bar() +\n  theme_minimal() + \n  theme(axis.text.x = element_text(angle=90)) +\n  labs(x=\"Type\", y=\"Frequency\", title=titleWithItalics)\n```\n\n## 5.3 Bar plots\n- Barplots are great to visualize counts and proportions\n- A simple bar plot can be drawn with the code we already considered\n```{r barplot1, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type)) + \n  geom_bar()\n```\n\n## 5.3.1 Bar plot options (1/3)\n- If you set the aesthetics `color` and `fill` to the same variable as your `x` axis, the categories of your variable will be colored differently \n- This will also add a legend\n```{r barplotOptions, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar()\n```\n\n## 5.3.1 Bar plot options (1/3)\n```{r barplotOptionsPlot, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar()\n```\n\n## 5.3.1 Bar plot options (2/3)\n- You can get rid of the legend with `theme()` and the parameter `legend.position` \n```{r barplotOptions21, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar() + \n  theme(legend.position = \"none\")\n```\n\n## 5.3.1 Bar plot options (2/3)\n```{r barplotOptions21Plot, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar() + \n  theme(legend.position = \"none\")\n```\n\n\n## 5.3.1 Bar plot options (3/3)\n- You can get rid of the legend title with `theme()` and the parameter `legend.title`\n```{r barplotOptions2, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar() + \n  theme(legend.title =  element_blank())\n```\n\n## 5.3.1 Bar plot options (3/3)\n```{r barplotOptions2Plot, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type, color=type, fill=type)) + \n  geom_bar() + \n  theme(legend.title =  element_blank())\n```\n\n\n## 5.3.2 Visualizing proportions with barplots (1/3)\n- To visualize proportions with barplots, we have to write some extra code:\n    - We set up our ggplot object as we would normally do\n    - We add `geom_bar()`\n    - We tell `geom_bar()` to calculate its `y` axis by dividing the count `..count..` (this is a special `ggplot` variable) of each value by the sum of the count of the values  `sum(..count..)`\n\n```{r proportions, eval=FALSE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  +\n  geom_bar(aes(y=..count../sum(..count..)))\n```\n\n## 5.3.2 Visualizing proportions with barplots (1/3)\n\n```{r proportions_plot, eval=TRUE}\nlibrary(ggplot2)\nggplot(dataSet, aes(x=type))  +\n  geom_bar(aes(y=..count../sum(..count..)))\n```\n\n\n## 5.3.2 Visualizing proportions with barplots (2/3)\n- We can tell `ggplot` that the y-axis does not plot decimals, but rather proportions with `scale_y_continuous` and its `label` parameter.\n- If we set it to `percent`, then our `y` axis will have nice percentage formatting\n- We need the `scales` package for this to work\n\n```{r proportions2a, eval=FALSE}\nlibrary(ggplot2)\nlibrary(scales)\nggplot(dataSet, aes(x=type))  +\n  geom_bar(aes(y=..count../sum(..count..))) +\n  scale_y_continuous(labels=percent)\n```\n\n## 5.3.2 Visualizing proportions with barplots (2/3)\n\n```{r proportions2aplot, eval=TRUE}\nlibrary(ggplot2)\nlibrary(scales)\nggplot(dataSet, aes(x=type))  +\n  geom_bar(aes(y=..count../sum(..count..))) +\n  scale_y_continuous(labels=percent)\n```\n\n## 5.3.2 Visualizing proportions with barplots (3/3)\n- To make the plot pretty, we can add colors, remove the legend title, and add a better title for the `y` axis\n\n```{r proportions2, eval=FALSE}\nlibrary(ggplot2)\nlibrary(scales)\nggplot(dataSet, aes(x=type, color=type, fill=type))  +\n  geom_bar(aes(y=..count../sum(..count..))) +\n  scale_y_continuous(labels=percent) +\n  theme(legend.title=element_blank()) + \n  labs(y=\"Percentages\")\n```\n\n\n## 5.3.2 Visualizing proportions with barplots (3/3)\n\n```{r proportions2plot, eval=TRUE}\nlibrary(ggplot2)\nlibrary(scales)\nggplot(dataSet, aes(x=type, color=type, fill=type))  +\n  geom_bar(aes(y=..count../sum(..count..))) +\n  scale_y_continuous(labels=percent) +\n  theme(legend.title=element_blank()) + \n  labs(y=\"Percentages\")\n```\n\n## 5.4 Excercises\n- Go to http://www.jeroenclaes.be/statistics_for_linguistics/labs/class3.html and perform the excercises under *7. Bar plots*\n\n\n\n## Questions?\n- ???\n\n## 6. References\n- Claes, J. (2017). Cognitive and geographic constraints on morphosyntactic variation: The variable agreement of presentational haber in Peninsular Spanish. *Belgian Journal of Linguistics* (31), 28-53.",
    "created" : 1518651524270.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3587179284",
    "id" : "7DFE963F",
    "lastKnownWriteTime" : 1518974409,
    "last_content_update" : 1518974409335,
    "path" : "~/Desktop/statistics_for_linguistics/slides/Class3.Rmd",
    "project_path" : null,
    "properties" : {
        "last_setup_crc32" : "",
        "tempName" : "Untitled2"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}